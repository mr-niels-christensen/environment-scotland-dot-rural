'''
Created on 26 Sep 2014

@author: s05nc4
'''

from rdflib import URIRef, Graph, RDF, RDFS, BNode, Literal, Namespace
import csv
import urllib2

'''Used as a marker for members that are to be treated as RDF names.'''
RDF_NAME = object()

class _URIRefCreator(type):
    '''See http://eli.thegreenplace.net/2011/08/14/python-metaclasses-by-example/
       A metaclass is required in order to assign a static member of a class
       outside its definition.
       This metaclass transforms any static member that is equal to RDF_NAME
       into an rdflib.URIRef based on the static member's name.
    '''
    def __getattribute__(self, name):
        '''This method will be called when you access MYCLASS.MYSTATICMEMBER if
           MYCLASS.__metaclass__ == _URIRefCreator
        '''
        x = type.__getattribute__(self, name) #This is the default lookup operation
        if x is RDF_NAME: #Replace the dummy value with a URIRef based on name
            return URIRef(type.__getattribute__(self, 'BASE_URI') + '#' + name)
        else:
            return x
        
def namespace(base_uri):
    '''Usage: @namespace('http://example.com')
              class MyClass:
                  myRdfName = RDF_NAME
        Transforms MyClass so that MyClass.myRdfName will 
    '''
    def class_rebuilder(cls):
        class NamespaceClass(cls):
            __metaclass__ = _URIRefCreator
            BASE_URI = base_uri
        return NamespaceClass
    return class_rebuilder

PROV  = Namespace('http://www.w3.org/ns/prov#')
A = RDF.type

@namespace('http://dot.rural/sepake/csv')
class CSV(object):
    Import = RDF_NAME
    File = RDF_NAME
    Row = RDF_NAME
    Cell = RDF_NAME
    fieldName = RDF_NAME
    fieldValue = RDF_NAME
    
CSV_ontology = [(CSV.Import, A, PROV.Activity),
                (CSV.File, A, RDF.Bag),#TODO Maybe use a named graph instead?
                (CSV.Row,    A, RDF.Bag),
                (CSV.Cell,   A, RDFS.Resource)
                ]

class CsvGraph(Graph):
    def __init__(self):
        super(CsvGraph, self).__init__()
        #ID of this import operation
        self._ROOT_ID = BNode()
        #Type of this import operation
        self.add((self._ROOT_ID, RDF.type, CSV.Import))
    
    def read_url(self, url):
        '''Loads a CSV file from a URL and adds each row
        '''
        self.read(urllib2.urlopen(url)) #TODO add PROV
        
    def read(self, csv_input):
        '''Parses a CSV file and adds each row
        '''
        #ID of this file object
        file_id = BNode()
        #Type of a CSV file object
        self.add((file_id, A, CSV.File))
        #This file object was generated by this Import
        self.add((self._ROOT_ID, PROV.generated, file_id))
        #TODO add more PROV
        for row in csv.DictReader(csv_input):
            self._add_csv_row(row)
            
    def _add_csv_row(self, row):
        '''Adds a CSV row to the graph in the following style:
           file_id  -->  row_id --> cell_id_0 --> Heading_0
                              |              \--> Value_0
                              |---> cell_id_1 ...
                               ...
           The link from ROOT_ID to row_id is an rdfs:member
           The link from row_id to cell_id is also an rdfs:member
           Headings and values are literals, linked to by specific properties in our ontology.
        '''
        #ID of this row
        row_id = BNode()
        #Type of a CSV row
        self.add((row_id, RDF.type, CSV.Row))
        #ROOT_ID  -->  row_id 
        self.add((self._ROOT_ID, RDFS.member, row_id))
        for heading, value in row.iteritems():
            #ID of this cell
            cell_node = BNode()
            #Type of a CSV cell
            self.add((row_id, RDF.type, CSV.Cell))
            #row_id --> cell_id
            self.add((row_id, RDFS.member, cell_node))
            #cell_id --> Heading
            self.add((cell_node, CSV.fieldName, Literal(heading)))
            #cell_id --> Value
            self.add((cell_node, CSV.fieldValue, Literal(value)))

EXAMPLE = '''"A","B","C"
1,2,3
4,5,6
'''
if __name__ == '__main__':
    import StringIO
    g = CsvGraph()
    g.read(StringIO.StringIO(EXAMPLE))
    for row in g.query('SELECT ?member ?h ?v WHERE {?root <%s> <%s> . ?root <%s>+ ?member. ?member <%s> ?h . ?member <%s> ?v}' % (RDF.type, CSV.Import, RDFS.member, CSV.fieldName, CSV.fieldValue)):
        print row
        
        